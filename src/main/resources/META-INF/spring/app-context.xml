<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/data/jpa
						http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security-3.0.3.xsd">

	<description>Example configuration to get you started.</description>

	<context:component-scan base-package="com.spring.mti" />
	
	<bean id="persistenceAnnotation"  
	  class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver"/>
		<property name="url" value="jdbc:postgresql://localhost/test"/>
		<property name="username" value="postgres"/>
		<property name="password" value="postgres"/>
	</bean>

	 <bean id="persistenceUnitManager" class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
     	<property name="persistenceXmlLocations">
   			<list value-type="java.lang.String">
    			<value>classpath*:META-INF/persistence.xml</value>
   			</list>
  		</property>
	</bean>
	
	<bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		  <property name="persistenceUnitManager" ref="persistenceUnitManager" /> 
		      <property name="persistenceUnitName" value="JPA_POSTGRES" /> 
			  <property name="dataSource" ref="dataSource"/>
	</bean>
    
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="emf" />
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <jpa:repositories base-package="com.spring.mti.repository" entity-manager-factory-ref="emf" transaction-manager-ref="transactionManager" />
    
    <!-- Security -->   
   <!--  <bean id="userDetailsService" class="com.spring.mti.service.UserDetailsServiceImpl" /> -->
   <bean id="userDao" class="com.spring.mti.dao.UsersDaoImpl" />
   <bean id="authoritiesDao" class="com.spring.mti.dao.AuthoritiesDaoImpl" />
   
   <bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
  		<property name="dataSource" ref="dataSource"/>
  		<property name="usersByUsernameQuery" value = "select username,password, enabled from users where username=?"/>
  		<property name="authoritiesByUsernameQuery" value ="select u.username, ur.authority from users u, authorities ur where u.id = ur.username and u.username =?" />
	</bean>
   
    <bean id="daoAuthenticationProvider"
  		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
  		<!-- <property name="userDetailsService" ref="inMemoryDaoImpl" />  -->
  		<property name="userDetailsService" ref="userDetailsService"/>
  		<!-- <property name="saltSource" ref bean="saltSource"/>   -->
  		<!-- <property name="passwordEncoder" ref="passwordEncoder"/> -->
	</bean>
    <bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
 		 <property name="providers">
    		<list>
      			<ref local="daoAuthenticationProvider"/>
    		</list>
  		</property>
<!-- 
  		<property name="users-by-username-query" value = "select username,password, enabled from users where username=?"/>
  		<property name="authorities-by-username-query" value ="select u.username, ur.authority from users u, authority ur where u.id = ur.usernameid and u.username =?" /> 		
	 -->
	</bean> 
</beans>